package GUI;

import BO.CitaBO;
import DTO.CitaNuevoDTO;
import configuracion.DependencyInjector;
import java.awt.Component;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * Clase pantallaCitasPendientes
 *
 * Esta clase representa una interfaz gráfica de usuario (GUI) para visualizar
 * las citas pendientes de los pacientes en una clínica.
 *
 * Proporciona una tabla con las citas pendientes y un botón para regresar a la
 * pantalla principal.
 *
 * @author Sebastian Moreno
 */
public class pantallaCitasPendientes extends javax.swing.JPanel {

    /**
     * Constructor de pantallaCitasPendientes
     *
     * Inicializa la interfaz gráfica, configurando la tabla de citas pendientes
     * y agregando los componentes necesarios.
     */
    private CitaBO citaBO = DependencyInjector.crearCitaBO();
    FramePrincipal framePrincipal;

    /**
     * Constructor que inicializa los componentes de la ventana.
     *
     * Configura el diseño, la tabla y los botones de la interfaz gráfica.
     */
    public pantallaCitasPendientes(FramePrincipal frame) {
        this.framePrincipal = frame;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtCitasProgramadas = new javax.swing.JLabel();
        txtEmergencia = new javax.swing.JLabel();
        pnlCitasProgramadas = new javax.swing.JScrollPane();
        tblCitasProgramadas = new javax.swing.JTable();
        pnlCitasEmergencia = new javax.swing.JScrollPane();
        tblCitasEmergencia = new javax.swing.JTable();
        btnVolver = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtCitasProgramadas.setFont(new java.awt.Font("Roboto", 0, 36)); // NOI18N
        txtCitasProgramadas.setForeground(new java.awt.Color(0, 0, 0));
        txtCitasProgramadas.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtCitasProgramadas.setText("Citas Programadas");
        txtCitasProgramadas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtCitasProgramadasMouseClicked(evt);
            }
        });
        add(txtCitasProgramadas, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, 680, -1));

        txtEmergencia.setFont(new java.awt.Font("Roboto", 0, 36)); // NOI18N
        txtEmergencia.setForeground(new java.awt.Color(0, 0, 0));
        txtEmergencia.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtEmergencia.setText("Emergencia");
        add(txtEmergencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 340, 262, -1));

        tblCitasProgramadas.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        tblCitasProgramadas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Paciente", "Horario Programado", "Estado", "Iniciar"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCitasProgramadas.setRowHeight(40);
        pnlCitasProgramadas.setViewportView(tblCitasProgramadas);

        add(pnlCitasProgramadas, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, 840, 270));

        tblCitasEmergencia.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        tblCitasEmergencia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Paciente", "Horario Programado", "Estado", "Iniciar"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCitasEmergencia.setRowHeight(40);
        pnlCitasEmergencia.setViewportView(tblCitasEmergencia);

        add(pnlCitasEmergencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 390, 840, 260));

        btnVolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/atras (1).png"))); // NOI18N
        btnVolver.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnVolver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVolverMouseClicked(evt);
            }
        });
        add(btnVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/reload (1).png"))); // NOI18N
        btnRefresh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRefreshMouseClicked(evt);
            }
        });
        add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 10, 60, 50));
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Maneja el evento de clic en el botón "Volver" para regresar al menú
     * principal de médicos.
     *
     * @param evt Evento de clic del ratón.
     */
    private void btnVolverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVolverMouseClicked
        framePrincipal.cambiarPanel("pantallaMedicosMenu");
    }//GEN-LAST:event_btnVolverMouseClicked

    private void txtCitasProgramadasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCitasProgramadasMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCitasProgramadasMouseClicked

    /**
     * Maneja el evento de clic en el botón de actualización, refrescando las
     * citas de emergencia y programadas.
     *
     * @param evt Evento de clic del ratón.
     */
    private void btnRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRefreshMouseClicked
        consultarCitasEmergencia();
        consultarCitasProgramadas();
    }//GEN-LAST:event_btnRefreshMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnRefresh;
    private javax.swing.JLabel btnVolver;
    private javax.swing.JScrollPane pnlCitasEmergencia;
    private javax.swing.JScrollPane pnlCitasProgramadas;
    private javax.swing.JTable tblCitasEmergencia;
    private javax.swing.JTable tblCitasProgramadas;
    private javax.swing.JLabel txtCitasProgramadas;
    private javax.swing.JLabel txtEmergencia;
    // End of variables declaration//GEN-END:variables

    /**
     * Consulta y muestra en la tabla las citas programadas del médico
     * autenticado. Recupera los datos desde la capa de negocio y los formatea
     * para su visualización.
     */
    public void consultarCitasProgramadas() {
        try {
            List<CitaNuevoDTO> citas = citaBO.obtenerAgendaCitasProgramadas(framePrincipal.getUsuarioAutenticado().getIdUsuario());

            // Si la lista es nula, crear una vacía para evitar NullPointerException
            if (citas == null) {
                citas = new ArrayList<>();
            }

            // Columnas de la tabla
            String[] columnas = {"PACIENTE", "HORARIO", "ESTADO", "ACCION"};
            Object[][] datos = new Object[citas.size()][4];
            Object[] citasLista = new Object[citas.size()];

            // Formateador para la fecha y hora
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEEE d 'de' MMMM 'a las' hh:mm a", new Locale("es", "ES"));

            for (int i = 0; i < citas.size(); i++) {
                citasLista[i] = citas.get(i);
                CitaNuevoDTO cita = citas.get(i);
                datos[i][0] = cita.getPaciente().getNombre() + " " + cita.getPaciente().getApellidoPaterno();
                datos[i][1] = cita.getFechaHora().format(formatter); // Formato legible
                datos[i][2] = cita.getEstado();
                datos[i][3] = "Iniciar"; // Botón en la tabla
            }

            DefaultTableModel model = new DefaultTableModel(datos, columnas) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return column == 3; // Solo la columna de "Iniciar" será editable
                }
            };

            SwingUtilities.invokeLater(() -> {
                DefaultTableModel emptyModel = new DefaultTableModel();
                tblCitasProgramadas.setModel(emptyModel); // Limpia la tabla
                tblCitasProgramadas.setModel(model);
                agregarBotonIniciar(tblCitasProgramadas, citasLista);
                pnlCitasProgramadas.revalidate();
                pnlCitasProgramadas.repaint();
            });

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar citas: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Consulta y muestra en la tabla las citas de emergencia del médico
     * autenticado. Recupera los datos desde la capa de negocio y los formatea
     * para su visualización.
     */
    public void consultarCitasEmergencia() {
        try {
            List<CitaNuevoDTO> citas = citaBO.obtenerAgendaCitasEmergencia(framePrincipal.getUsuarioAutenticado().getIdUsuario());

            // Si la lista es nula, crear una vacía para evitar NullPointerException
            if (citas == null) {
                citas = new ArrayList<>();
            }
            // Columnas de la tabla
            String[] columnas = {"PACIENTE", "HORARIO", "ESTADO", "ACCION"};
            Object[][] datos = new Object[citas.size()][4];
            Object[] citasLista = new Object[citas.size()];

            // Formateador para la fecha y hora
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEEE d 'de' MMMM 'a las' hh:mm a", new Locale("es", "ES"));

            for (int i = 0; i < citas.size(); i++) {
                citasLista[i] = citas.get(i);
                CitaNuevoDTO cita = citas.get(i);
                datos[i][0] = cita.getPaciente().getNombre() + " " + cita.getPaciente().getApellidoPaterno();
                datos[i][1] = cita.getFechaHora().format(formatter); // Formato legible
                datos[i][2] = cita.getEstado();
                datos[i][3] = "Iniciar"; // Botón en la tabla
            }

            DefaultTableModel model = new DefaultTableModel(datos, columnas) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return column == 3; // Solo la columna de "Iniciar" será editable
                }
            };

            SwingUtilities.invokeLater(() -> {
                DefaultTableModel emptyModel = new DefaultTableModel();
                tblCitasEmergencia.setModel(emptyModel); // Limpia la tabla
                tblCitasEmergencia.setModel(model);
                agregarBotonIniciar(tblCitasEmergencia, citasLista);
                pnlCitasEmergencia.revalidate();
                pnlCitasEmergencia.repaint();
            });

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al cargar citas: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Agrega un botón "Iniciar" en la columna de acciones de la tabla para cada
     * cita. Permite iniciar una cita programada o de emergencia.
     *
     * @param tabla La JTable en la que se agregará el botón.
     * @param citasLista Arreglo de objetos que representa la lista de citas.
     */
    private void agregarBotonIniciar(JTable tabla, Object[] citasLista) {
        tabla.getColumnModel().getColumn(3).setCellRenderer(new ButtonRenderer());
        tabla.getColumnModel().getColumn(3).setCellEditor(new ButtonEditor(new JCheckBox(), citasLista));
    }

    /**
     * Clase que representa el renderizador de botones dentro de una celda de la
     * tabla.
     */
    class ButtonRenderer extends JButton implements TableCellRenderer {

        /**
         * Constructor que establece la opacidad del botón.
         */
        public ButtonRenderer() {
            setOpaque(true);
        }

        /**
         * Renderiza el botón dentro de una celda de la tabla.
         *
         * @param table La JTable donde se renderiza el botón.
         * @param value El valor de la celda.
         * @param isSelected Indica si la celda está seleccionada.
         * @param hasFocus Indica si la celda tiene el foco.
         * @param row La fila donde se encuentra la celda.
         * @param column La columna donde se encuentra la celda.
         * @return El botón renderizado.
         */
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setText((value == null) ? "Iniciar" : value.toString());
            return this;
        }
    }

    /**
     * Clase que maneja la edición de una celda de la tabla para agregar
     * funcionalidad al botón "Iniciar".
     */
    class ButtonEditor extends DefaultCellEditor {

        private JButton button;
        private boolean isPushed;
        private int row;
        private JTable table;
        private Object[] citasLista;

        /**
         * Constructor de ButtonEditor.
         *
         * @param checkBox Componente base para la celda editable.
         * @param citasLista Arreglo con la lista de citas.
         */
        public ButtonEditor(JCheckBox checkBox, Object[] citasLista) {
            super(checkBox);
            this.citasLista = citasLista;
            button = new JButton("Iniciar");
            button.setOpaque(true);

            button.addActionListener(e -> fireEditingStopped());
        }

        /**
         * Devuelve el componente del editor de celda.
         *
         * @param table La JTable que contiene la celda.
         * @param value El valor de la celda.
         * @param isSelected Indica si la celda está seleccionada.
         * @param row La fila de la celda.
         * @param column La columna de la celda.
         * @return El botón que representa la celda editable.
         */
        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.table = table;
            this.row = row;
            isPushed = true;
            return button;
        }

        /**
         * Devuelve el valor de la celda después de la edición.
         *
         * @return Una cadena vacía ya que el botón no almacena un valor
         * permanente.
         */
        @Override
        public Object getCellEditorValue() {
            if (isPushed) {
                CitaNuevoDTO cita = (CitaNuevoDTO) citasLista[row];

                if (table == tblCitasProgramadas) {
                    // Acción para citas programadas
                    JOptionPane.showMessageDialog(null, "Iniciando cita programada con " + cita.getPaciente().getNombre());

                    // Se asigna la cita al framePrincipal
                    framePrincipal.setCitaFinal(cita);
                    pantallaDatosConsulta horaEntrada = framePrincipal.getPantallaDatosConsulta();
                    horaEntrada.cargarHoraEntrada();
                    framePrincipal.cambiarPanel("pantallaDatosConsulta");

                    // Se elimina el botón de la tabla
                    eliminarBotonDeFila(table, row);
                } else if (table == tblCitasEmergencia) {
                    // Acción para citas de emergencia
                    JOptionPane.showMessageDialog(null, "Iniciando cita de emergencia con " + cita.getPaciente().getNombre());
                    framePrincipal.setCitaFinal(cita);
                    framePrincipal.cambiarPanel("pantallaFolio");
                    // Se elimina el botón de la tabla
                    eliminarBotonDeFila(table, row);
                }
            }
            isPushed = false;
            return "";
        }

        /**
         * Finaliza la edición de la celda y devuelve el control a la tabla.
         *
         * @return true si la edición se detiene con éxito.
         */
        @Override
        public boolean stopCellEditing() {
            isPushed = false;
            return super.stopCellEditing();
        }

        /**
         * Método para eliminar el botón de la fila seleccionada.
         *
         * @param table La JTable donde se eliminará el botón.
         * @param row La fila donde se eliminará el botón.
         */
        private void eliminarBotonDeFila(JTable table, int row) {
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.setValueAt("", row, 3); // Se reemplaza el botón con una celda vacía
        }
    }

}
