package GUI;

import BO.Direccion_PacienteBO;
import BO.PacienteBO;
import BO.UsuarioBO;
import DTO.Direccion_PacienteNuevaDTO;
import DTO.PacienteNuevoDTO;
import Entidades.Direccion_Paciente;
import Entidades.Paciente;
import Exception.NegocioException;
import Exception.PersistenciaException;
import com.toedter.calendar.JDateChooser;
import configuracion.DependencyInjector;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * Pantalla tu información.
 *
 * @author Sebastian Moreno
 */
public class pantallaInformacionUsuario extends javax.swing.JPanel {

    private UsuarioBO usuarioBO = DependencyInjector.crearUsuarioBO();
    private PacienteBO pacienteBO = DependencyInjector.crearPacienteBO();
    private Direccion_PacienteBO direccionBO = DependencyInjector.crearDireccionBO();
    private JDateChooser selectorFechas;
    private FramePrincipal framePrincipal;
    pantallaInicioSesion pantalla = new pantallaInicioSesion(framePrincipal);

    /**
     * Constructor de la pantalla.
     *
     * @param frame El FramePrincipal que contiene esta pantalla.
     */
    public pantallaInformacionUsuario(FramePrincipal frame) {
        this.framePrincipal = frame;
        selectorFechas = new JDateChooser();
        selectorFechas.setBounds(610, 285, 200, 40);
        LocalDate minDate = LocalDate.now().minusYears(6);
        selectorFechas.setMaxSelectableDate(java.sql.Date.valueOf(minDate));
        LocalDate maxDate = LocalDate.now().minusYears(150);
        selectorFechas.setMinSelectableDate(java.sql.Date.valueOf(maxDate));
        selectorFechas.setDate(java.sql.Date.valueOf(minDate));
        this.add(selectorFechas);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtSubTitulo = new javax.swing.JLabel();
        txtTituloPantalla = new javax.swing.JLabel();
        txtCodigoPostal = new javax.swing.JLabel();
        txtNombre = new javax.swing.JLabel();
        txtApellidoP = new javax.swing.JLabel();
        txtApellidoM = new javax.swing.JLabel();
        txtFecha = new javax.swing.JLabel();
        txtCorreoElectronico = new javax.swing.JLabel();
        txtColonia = new javax.swing.JLabel();
        txtCalle = new javax.swing.JLabel();
        txtNumeroExt = new javax.swing.JLabel();
        inputCorreo = new javax.swing.JTextField();
        inputCalle = new javax.swing.JTextField();
        inputNumExt = new javax.swing.JTextField();
        inputColonia = new javax.swing.JTextField();
        inputCodigoPostal = new javax.swing.JTextField();
        inputNombre = new javax.swing.JTextField();
        inputApellidoP = new javax.swing.JTextField();
        inputCelular = new javax.swing.JTextField();
        inputApellidoM = new javax.swing.JTextField();
        pnlRestablecerDatos = new javax.swing.JPanel();
        btnRestablecer = new javax.swing.JLabel();
        pnlBotonGuardar1 = new javax.swing.JPanel();
        btnGuardar1 = new javax.swing.JLabel();
        btnVolver = new javax.swing.JLabel();
        txtFecha1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtSubTitulo.setFont(new java.awt.Font("Roboto", 1, 48)); // NOI18N
        txtSubTitulo.setForeground(new java.awt.Color(0, 0, 0));
        txtSubTitulo.setText("Tu Información");
        add(txtSubTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 30, -1, -1));

        txtTituloPantalla.setFont(new java.awt.Font("Roboto", 1, 44)); // NOI18N
        txtTituloPantalla.setForeground(new java.awt.Color(0, 0, 0));
        txtTituloPantalla.setText("Registro Médico");
        add(txtTituloPantalla, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 110, -1, -1));

        txtCodigoPostal.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        txtCodigoPostal.setForeground(new java.awt.Color(0, 0, 0));
        txtCodigoPostal.setText("Codigo Postal*:");
        add(txtCodigoPostal, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 440, -1, -1));

        txtNombre.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        txtNombre.setForeground(new java.awt.Color(0, 0, 0));
        txtNombre.setText("Nombre(s)*:");
        add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 170, -1, -1));

        txtApellidoP.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        txtApellidoP.setForeground(new java.awt.Color(0, 0, 0));
        txtApellidoP.setText("Apellido Paterno*:");
        add(txtApellidoP, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 170, -1, -1));

        txtApellidoM.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        txtApellidoM.setForeground(new java.awt.Color(0, 0, 0));
        txtApellidoM.setText("Apellido Materno (Opcional):");
        add(txtApellidoM, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 260, -1, -1));

        txtFecha.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        txtFecha.setForeground(new java.awt.Color(0, 0, 0));
        txtFecha.setText("Celular*:");
        add(txtFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 170, -1, -1));

        txtCorreoElectronico.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        txtCorreoElectronico.setForeground(new java.awt.Color(0, 0, 0));
        txtCorreoElectronico.setText("Correo Electronico*:");
        add(txtCorreoElectronico, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 350, -1, -1));

        txtColonia.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        txtColonia.setForeground(new java.awt.Color(0, 0, 0));
        txtColonia.setText("Colonia*:");
        add(txtColonia, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 260, -1, -1));

        txtCalle.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        txtCalle.setForeground(new java.awt.Color(0, 0, 0));
        txtCalle.setText("Calle*:");
        add(txtCalle, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 350, -1, -1));

        txtNumeroExt.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        txtNumeroExt.setForeground(new java.awt.Color(0, 0, 0));
        txtNumeroExt.setText("Numero Ext*:");
        add(txtNumeroExt, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 440, -1, -1));

        inputCorreo.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        inputCorreo.setBorder(null);
        add(inputCorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 380, 230, 40));

        inputCalle.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        inputCalle.setBorder(null);
        add(inputCalle, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 380, 200, 40));

        inputNumExt.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        inputNumExt.setBorder(null);
        add(inputNumExt, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 470, 110, 40));

        inputColonia.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        inputColonia.setBorder(null);
        add(inputColonia, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 290, 200, 40));

        inputCodigoPostal.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        inputCodigoPostal.setBorder(null);
        add(inputCodigoPostal, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 470, 200, 40));

        inputNombre.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        inputNombre.setBorder(null);
        add(inputNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 200, 200, 40));

        inputApellidoP.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        inputApellidoP.setBorder(null);
        add(inputApellidoP, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 200, 200, 40));

        inputCelular.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        inputCelular.setBorder(null);
        add(inputCelular, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 200, 200, 40));

        inputApellidoM.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        inputApellidoM.setBorder(null);
        add(inputApellidoM, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 290, 230, 40));

        pnlRestablecerDatos.setBackground(new java.awt.Color(255, 102, 102));
        pnlRestablecerDatos.setForeground(new java.awt.Color(0, 0, 0));
        pnlRestablecerDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlRestablecerDatosMouseClicked(evt);
            }
        });

        btnRestablecer.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        btnRestablecer.setForeground(new java.awt.Color(255, 255, 255));
        btnRestablecer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnRestablecer.setText("Cargar datos");
        btnRestablecer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRestablecer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRestablecerMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlRestablecerDatosLayout = new javax.swing.GroupLayout(pnlRestablecerDatos);
        pnlRestablecerDatos.setLayout(pnlRestablecerDatosLayout);
        pnlRestablecerDatosLayout.setHorizontalGroup(
            pnlRestablecerDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 340, Short.MAX_VALUE)
            .addGroup(pnlRestablecerDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlRestablecerDatosLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(btnRestablecer, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        pnlRestablecerDatosLayout.setVerticalGroup(
            pnlRestablecerDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
            .addGroup(pnlRestablecerDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlRestablecerDatosLayout.createSequentialGroup()
                    .addContainerGap(7, Short.MAX_VALUE)
                    .addComponent(btnRestablecer, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(8, Short.MAX_VALUE)))
        );

        add(pnlRestablecerDatos, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 600, 340, 40));

        pnlBotonGuardar1.setBackground(new java.awt.Color(0, 123, 255));
        pnlBotonGuardar1.setForeground(new java.awt.Color(0, 0, 0));

        btnGuardar1.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        btnGuardar1.setForeground(new java.awt.Color(255, 255, 255));
        btnGuardar1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnGuardar1.setText("Guardar Cambios");
        btnGuardar1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuardar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGuardar1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlBotonGuardar1Layout = new javax.swing.GroupLayout(pnlBotonGuardar1);
        pnlBotonGuardar1.setLayout(pnlBotonGuardar1Layout);
        pnlBotonGuardar1Layout.setHorizontalGroup(
            pnlBotonGuardar1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 330, Short.MAX_VALUE)
            .addGroup(pnlBotonGuardar1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlBotonGuardar1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(btnGuardar1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        pnlBotonGuardar1Layout.setVerticalGroup(
            pnlBotonGuardar1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(pnlBotonGuardar1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlBotonGuardar1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(btnGuardar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        add(pnlBotonGuardar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 600, 330, 40));

        btnVolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/atras (1).png"))); // NOI18N
        btnVolver.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnVolver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVolverMouseClicked(evt);
            }
        });
        add(btnVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        txtFecha1.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        txtFecha1.setForeground(new java.awt.Color(0, 0, 0));
        txtFecha1.setText("Fecha de Nacimiento*:");
        add(txtFecha1, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 260, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Maneja el evento de clic en el botón "Cargar datos". Carga la información
     * del paciente desde la base de datos y la muestra en los campos.
     *
     * @param evt El evento del mouse.
     */
    private void btnRestablecerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRestablecerMouseClicked
        try {
            cargarPaciente();
        } catch (PersistenciaException ex) {
            Logger.getLogger(pantallaInformacionUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRestablecerMouseClicked

    /**
     * Maneja el evento de clic en el botón "Guardar Cambios". Valida los campos
     * del formulario y, si son válidos, actualiza la información del paciente
     * en la base de datos.
     *
     * @param evt El evento del mouse.
     */
    private void btnGuardar1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGuardar1MouseClicked
        try {
            if (validarCampos() == true) {
                actualizarPaciente();
            } else {

            }
        } catch (NegocioException ex) {
            Logger.getLogger(pantallaInformacionUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGuardar1MouseClicked

    /**
     * Maneja el evento de clic en el botón "Volver". Regresa a la pantalla de
     * pacientes.
     *
     * @param evt El evento del mouse.
     */
    private void btnVolverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVolverMouseClicked
        framePrincipal.cambiarPanel("pantallaPacientes");
    }//GEN-LAST:event_btnVolverMouseClicked

    private void pnlRestablecerDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlRestablecerDatosMouseClicked

    }//GEN-LAST:event_pnlRestablecerDatosMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnGuardar1;
    private javax.swing.JLabel btnRestablecer;
    private javax.swing.JLabel btnVolver;
    private javax.swing.JTextField inputApellidoM;
    private javax.swing.JTextField inputApellidoP;
    private javax.swing.JTextField inputCalle;
    private javax.swing.JTextField inputCelular;
    private javax.swing.JTextField inputCodigoPostal;
    private javax.swing.JTextField inputColonia;
    private javax.swing.JTextField inputCorreo;
    private javax.swing.JTextField inputNombre;
    private javax.swing.JTextField inputNumExt;
    private javax.swing.JPanel pnlBotonGuardar1;
    private javax.swing.JPanel pnlRestablecerDatos;
    private javax.swing.JLabel txtApellidoM;
    private javax.swing.JLabel txtApellidoP;
    private javax.swing.JLabel txtCalle;
    private javax.swing.JLabel txtCodigoPostal;
    private javax.swing.JLabel txtColonia;
    private javax.swing.JLabel txtCorreoElectronico;
    private javax.swing.JLabel txtFecha;
    private javax.swing.JLabel txtFecha1;
    private javax.swing.JLabel txtNombre;
    private javax.swing.JLabel txtNumeroExt;
    private javax.swing.JLabel txtSubTitulo;
    private javax.swing.JLabel txtTituloPantalla;
    // End of variables declaration//GEN-END:variables

    /**
     * Carga los datos del paciente desde la base de datos y los muestra en los
     * campos.
     *
     * @throws PersistenciaException Si ocurre un error al acceder a la base de
     * datos.
     */
    public void cargarPaciente() throws PersistenciaException {
        Paciente pacienteConsultado = pacienteBO.buscarPacientePorID(framePrincipal.getUsuarioAutenticado().getIdUsuario());

        if (pacienteConsultado != null) {
            // Datos personales del paciente
            inputNombre.setText(pacienteConsultado.getNombre());
            inputApellidoM.setText(pacienteConsultado.getApellidoMaterno());
            inputApellidoP.setText(pacienteConsultado.getApellidoPaterno());
            inputCorreo.setText(pacienteConsultado.getCorreo());
            inputCelular.setText(pacienteConsultado.getTelefono());

            // Datos de la dirección 
            inputCalle.setText(pacienteConsultado.getDireccion().getCalle());
            inputColonia.setText(pacienteConsultado.getDireccion().getColonia());
            inputCodigoPostal.setText(String.valueOf(pacienteConsultado.getDireccion().getCp()));
            inputNumExt.setText(pacienteConsultado.getDireccion().getNumero());
            LocalDate fechaNacimiento = pacienteConsultado.getFechaNacimiento();
            Date date = Date.from(fechaNacimiento.atStartOfDay(ZoneId.systemDefault()).toInstant());
            selectorFechas.setDate(date);
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró información del paciente.", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }

    /**
     * Actualiza los datos del paciente en la base de datos.
     *
     * @throws NegocioException Si ocurre un error en la lógica de negocio.
     */
    public void actualizarPaciente() throws NegocioException {
        try {
            // Obtener el ID del usuario autenticado
            int id = framePrincipal.getUsuarioAutenticado().getIdUsuario();

            // Obtener la información de los inputs
            String nombre = inputNombre.getText().trim();
            String apellidoP = inputApellidoP.getText().trim();
            String apellidoM = inputApellidoM.getText().trim();
            String correo = inputCorreo.getText().trim();
            String celular = inputCelular.getText().trim();
            String calle = inputCalle.getText().trim();
            String colonia = inputColonia.getText().trim();
            String numero = inputNumExt.getText().trim();
            int codigoPostal = Integer.parseInt(inputCodigoPostal.getText().trim());

            // Obtener la fecha seleccionada en JDateChooser y convertirla a LocalDate
            Date fechaSeleccionada = selectorFechas.getDate();
            LocalDate fechaNacimiento = fechaSeleccionada.toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalDate();

            // Crear objeto Direccion
            Direccion_Paciente direccion = new Direccion_Paciente(calle, colonia, codigoPostal, numero);

            // Crear objeto Paciente con los datos actualizados
            PacienteNuevoDTO pacienteActualizado = new PacienteNuevoDTO(framePrincipal.getUsuarioAutenticado(), direccion, nombre, apellidoP, apellidoM, correo, fechaNacimiento, celular);
            // Llamar a la capa de negocio para actualizar los datos
            pacienteBO.actualizarPaciente(id, pacienteActualizado);

            // Mostrar mensaje de éxito
            JOptionPane.showMessageDialog(null, "Paciente actualizado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error: Código postal debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Error: Por favor, seleccione una fecha válida.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (PersistenciaException e) {
            JOptionPane.showMessageDialog(null, "Error al actualizar el paciente: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    /**
     * Valida los campos del formulario.
     *
     * @return true si todos los campos obligatorios son válidos, false en caso
     * contrario.
     */
    public boolean validarCampos() {

        if (!validarNombre()
                || !validarApellidoP()
                || !validarTelefono()
                || !validarCorreo()
                || !validarColonia()
                || !validarCodigoPostal()) {

            return false; // Si alguna validación falla, no continuar
        }

        if (inputNombre.getText() != null && !inputNombre.getText().isEmpty()
                && inputApellidoP.getText() != null && !inputApellidoP.getText().isEmpty()
                && inputCelular.getText() != null && !inputCelular.getText().isEmpty()
                && inputCorreo.getText() != null && !inputCorreo.getText().isEmpty()
                && selectorFechas.getDate() != null
                && inputCalle.getText() != null && !inputCalle.getText().isEmpty()
                && inputColonia.getText() != null && !inputColonia.getText().isEmpty()
                && inputCodigoPostal.getText() != null && !inputCodigoPostal.getText().isEmpty()
                && inputNumExt.getText() != null && !inputNumExt.getText().isEmpty()) {

            return true;
            // Aquí puedes continuar con la lógica si todos los campos están completos.
        } else {
            JOptionPane.showMessageDialog(null, "Llena todos los campos obligatorios(*) para completar el registro.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

    }

    /**
     * Valida el campo de correo electrónico.
     *
     * @return true si el correo electrónico es válido, false en caso contrario.
     */
    private boolean validarCorreo() {
        String correo = inputCorreo.getText();
        String regex = "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$";
        if (correo == null || !correo.matches(regex)) {
            JOptionPane.showMessageDialog(null, "Correo inválido. Debe tener el formato usuario@dominio.com", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    /**
     * Valida el campo de código postal.
     *
     * @return true si el código postal es válido, false en caso contrario.
     */
    private boolean validarCodigoPostal() {
        String cpTexto = inputCodigoPostal.getText();
        try {
            int cp = Integer.parseInt(cpTexto);
            if (cp < 10000 || cp > 99999) {
                JOptionPane.showMessageDialog(null, "Código Postal inválido. Debe tener exactamente 5 dígitos.", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            return true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Código Postal inválido. Debe ser un número de 5 dígitos.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    /**
     * Valida el campo de número de teléfono.
     *
     * @return true si el número de teléfono es válido, false en caso contrario.
     */
    private boolean validarTelefono() {
        String telefono = inputCelular.getText();
        String regex = "^[0-9]{10}$"; // EXACTAMENTE 10 dígitos

        if (telefono.isEmpty() || !telefono.matches(regex)) {
            JOptionPane.showMessageDialog(null,
                    "Número de teléfono inválido. Debe contener exactamente 10 dígitos numéricos.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }

    /**
     * Valida el campo de nombre.
     *
     * @return true si el nombre es válido, false en caso contrario.
     */
    private boolean validarNombre() {
        String nombre = inputNombre.getText();
        // Se establece un patrón el cual el nombre debe cumplir
        String regex = "^[A-ZÁÉÍÓÚÑ][a-záéíóúñ]+( [A-ZÁÉÍÓÚÑ][a-záéíóúñ]+)*$";
        // verificar que no sea un campo vacío
        if (nombre.isEmpty()) {
            JOptionPane.showMessageDialog(null, "El campo del nombre no fue rellenado. Ingrese un nombre válido.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
            // verificar que el nombre esté dentro de los límites establecidos
        } else if (nombre.length() < 3 || nombre.length() > 50) {
            JOptionPane.showMessageDialog(null, "Nombre inválido. La cantidad de caracteres está fuera del límite.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
            // verificar que el nombre cumpla con el patrón establecido
        } else if (!nombre.matches(regex)) {
            JOptionPane.showMessageDialog(null, "Nombre inválido. Debe iniciar con mayúscula y solo contener letras.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }

    /**
     * Valida el campo de apellido paterno.
     *
     * @return true si el apellido paterno es válido, false en caso contrario.
     */
    private boolean validarApellidoP() {
        String apellido = inputApellidoP.getText().trim(); // Eliminamos espacios en blanco
        String regex = "^[A-ZÁÉÍÓÚÑ][a-záéíóúñ]+$";

        if (apellido.isEmpty()) {
            JOptionPane.showMessageDialog(null, "El campo del apellido paterno no fue rellenado. Ingrese un nombre válido.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (apellido.length() < 3 || apellido.length() > 50) {
            JOptionPane.showMessageDialog(null, "Apellido paterno inválido. La cantidad de caracteres está fuera del límite.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (!apellido.matches(regex)) { // Verificamos si está vacío o no cumple con el regex
            JOptionPane.showMessageDialog(null,
                    "Apellido paterno inválido. Debe iniciar con mayúscula y solo contener letras.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }

    /**
     * Valida el campo de apellido materno (opcional).
     *
     * @return true si el apellido materno es válido (o está vacío), false en
     * caso contrario.
     */
    private boolean validarApellidoM() {
        String apellido = inputApellidoM.getText();
        String regex = "^[A-ZÁÉÍÓÚÑ][a-záéíóúñ]+$";
        if (apellido == null || !apellido.matches(regex)) {
            JOptionPane.showMessageDialog(null, "Apellido materno inválido. Debe iniciar con mayúscula y solo contener letras.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    /**
     * Valida el campo de colonia.
     *
     * @return true si la colonia es válida, false en caso contrario.
     */
    private boolean validarColonia() {
        String colonia = inputColonia.getText();
        String regex = "^[A-ZÁÉÍÓÚÑa-záéíóúñ0-9 ]+$"; // Permite letras, números y espacios
        if (colonia.isEmpty()) {
            JOptionPane.showMessageDialog(null, "El campo de la colonia no fue rellenado. Ingrese una colonia válida.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (colonia.length() < 3 || colonia.length() > 50) {
            JOptionPane.showMessageDialog(null, "Colonia inválida. La cantidad de caracteres está fuera del límite.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (colonia == null || !colonia.matches(regex)) {
            JOptionPane.showMessageDialog(null, "Colonia inválida. Solo se permiten letras, números y espacios.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

}
