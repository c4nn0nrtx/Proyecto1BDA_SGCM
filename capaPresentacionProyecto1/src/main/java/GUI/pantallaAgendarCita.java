/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import BO.CitaBO;
import BO.HorarioMedicoBO;
import BO.PacienteBO;
import DTO.CitaNuevoDTO;
import DTO.HorarioMedicoNuevoDTO;
import DTO.MedicoNuevoDTO;
import DTO.PacienteNuevoDTO;
import Entidades.Horario;
import Entidades.Medico;
import Entidades.Paciente;
import Exception.NegocioException;
import Exception.PersistenciaException;
import Mapper.Mapper;
import configuracion.DependencyInjector;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.util.List;
import java.sql.SQLException;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 *
 * @author Sebastian Moreno
 */
public class pantallaAgendarCita extends javax.swing.JPanel {

    private HorarioMedicoBO horarioMedicoBO = DependencyInjector.crearHorarioMedicoBO();
    private PacienteBO pacienteBO = DependencyInjector.crearPacienteBO();
    private CitaBO citaBO = DependencyInjector.crearCitaBO();
    private Object[][] horarioMedicoAlmacenado;
    private Medico medico = new Medico();
    private Horario horario = new Horario();

    Mapper mapper = new Mapper();

    /**
     * Creates new form pantallaAgendarCita1
     */
    FramePrincipal framePrincipal;

    public pantallaAgendarCita(FramePrincipal frame) throws NegocioException, SQLException {

        this.framePrincipal = frame;
        initComponents();
        cargarHorariosMedicos();
        tblCitasDisponibles.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) { // Evita ejecuciones innecesarias
                cargarDatosDesdeTabla();
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtSubTitulo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        pnlAgendarCita = new javax.swing.JPanel();
        btnAgendarCita = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCitasDisponibles = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        txtSubTitulo.setFont(new java.awt.Font("Roboto", 1, 48)); // NOI18N
        txtSubTitulo.setForeground(new java.awt.Color(0, 0, 0));
        txtSubTitulo.setText("Agendar Cita");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Horarios Disponibles:");

        pnlAgendarCita.setBackground(new java.awt.Color(60, 109, 232));

        btnAgendarCita.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        btnAgendarCita.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnAgendarCita.setText("Agendar una Cita");
        btnAgendarCita.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAgendarCita.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAgendarCitaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlAgendarCitaLayout = new javax.swing.GroupLayout(pnlAgendarCita);
        pnlAgendarCita.setLayout(pnlAgendarCitaLayout);
        pnlAgendarCitaLayout.setHorizontalGroup(
            pnlAgendarCitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAgendarCitaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAgendarCita, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlAgendarCitaLayout.setVerticalGroup(
            pnlAgendarCitaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAgendarCitaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAgendarCita, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tblCitasDisponibles.setBackground(new java.awt.Color(255, 255, 255));
        tblCitasDisponibles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Doctor", "Especialidad", "Horario"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCitasDisponibles.setRowHeight(40);
        jScrollPane1.setViewportView(tblCitasDisponibles);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/atras (1).png"))); // NOI18N
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 135, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlAgendarCita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(378, 378, 378))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(358, 358, 358)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSubTitulo)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(txtSubTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(pnlAgendarCita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        framePrincipal.cambiarPanel("pantallaPacientes");
    }//GEN-LAST:event_jLabel2MouseClicked

    private void btnAgendarCitaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAgendarCitaMouseClicked
        try {
            agendarCita();
        } catch (PersistenciaException ex) {
            Logger.getLogger(pantallaAgendarCita.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NegocioException ex) {
            Logger.getLogger(pantallaAgendarCita.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(pantallaAgendarCita.class.getName()).log(Level.SEVERE, null, ex);
        }
        framePrincipal.cambiarPanel("pantallaInformacionCita");
    }//GEN-LAST:event_btnAgendarCitaMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnAgendarCita;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlAgendarCita;
    private javax.swing.JTable tblCitasDisponibles;
    private javax.swing.JLabel txtSubTitulo;
    // End of variables declaration//GEN-END:variables

    private void cargarHorariosMedicos() throws NegocioException, SQLException {
        try {
            List<HorarioMedicoNuevoDTO> horariosMedicoDTO = horarioMedicoBO.obtenerHorariosMedicos();
            String[] columnas = {"DOCTOR", "ESPECIALIDAD", "HORARIO"};

            // Inicializar el arreglo de datos con el tamaño correcto
            String[][] datos = new String[horariosMedicoDTO.size()][3];
            horarioMedicoAlmacenado = new Object[horariosMedicoDTO.size()][2];

            for (int i = 0; i < horariosMedicoDTO.size(); i++) {
                HorarioMedicoNuevoDTO horarioMedicoDTO = horariosMedicoDTO.get(i);
                Medico medico = horarioMedicoDTO.getMedico();
                Horario horario = horarioMedicoDTO.getHorario();

                datos[i][0] = "Dr. " + medico.getNombre() + " " + medico.getApellidoPaterno(); // Nombre del doctor
                datos[i][1] = medico.getEspecialidad(); // Especialidad
                datos[i][2] = horario.getDiaSemana() + " , " + horario.getHoraInicio().toString() + " - " + horario.getHoraFin().toString(); // Horario

                horarioMedicoAlmacenado[i][0] = medico;
                horarioMedicoAlmacenado[i][1] = horario;

            }
            tblCitasDisponibles.setModel(new javax.swing.table.DefaultTableModel(datos, columnas));

            jScrollPane1.setViewportView(tblCitasDisponibles);

            jScrollPane1.revalidate();
            jScrollPane1.repaint();
        } catch (NegocioException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Advertencia", JOptionPane.WARNING_MESSAGE);
        }

    }

    private void cargarDatosDesdeTabla() {
        int filaSeleccionada = tblCitasDisponibles.getSelectedRow();
        if (filaSeleccionada != -1 && horarioMedicoAlmacenado != null) {
            medico = (Medico) horarioMedicoAlmacenado[filaSeleccionada][0];
            horario = (Horario) horarioMedicoAlmacenado[filaSeleccionada][1];
        }
    }

    private void agendarCita() throws PersistenciaException, NegocioException, SQLException {
        try {
            MedicoNuevoDTO medicoNuevo = mapper.MedicoToNuevoDTO(medico);
            int id = framePrincipal.getUsuarioAutenticado().getIdUsuario();
            Paciente paciente = pacienteBO.buscarPacientePorID(id);
            PacienteNuevoDTO pacienteNuevo = mapper.PacienteToNuevoDTO(paciente);
            DayOfWeek dia = citaBO.obtenerDia(horario.getDiaSemana());
            LocalDate fecha = obtenerProximoDia(dia);
            if (fecha != null) {
                LocalDateTime fechaHora = fecha.atTime(horario.getHoraInicio());
                CitaNuevoDTO citaNuevo = new CitaNuevoDTO("Programada", fechaHora, "0", "programada", medico, paciente);
                citaBO.agendarCita(citaNuevo, pacienteNuevo, medicoNuevo);
                JOptionPane.showMessageDialog(this, "Cita agendada correctamente", "", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No se ha encontrado una fecha válida para la cita", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (PersistenciaException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Advertencia", JOptionPane.WARNING_MESSAGE);
        }

    }

    public static LocalDate obtenerProximoDia(DayOfWeek dia) {
        //Este metodo sirve para buscar el proximo dia posible para la cita
        LocalDate hoy = LocalDate.now();
        for (int i = 1; i <= 10; i++) {
            LocalDate futuro = hoy.plusDays(i);
            if (futuro.getDayOfWeek() == dia) {
                return futuro;
            }
        }
        return null;
    }

}
